import React, { useState } from 'react';
import { Download, Calendar, AlertCircle } from 'lucide-react';
import Layout from '../components/Layout';
import {
  ResponsiveContainer,
  AreaChart,
  Area,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  PieChart,
  Pie,
  Cell,
  Legend
} from 'recharts';

// Sample data for donation trends
const donationData = [
  { month: 'Jan', donations: 45000, withdrawals: 32000 },
  { month: 'Feb', donations: 52000, withdrawals: 28000 },
  { month: 'Mar', donations: 48000, withdrawals: 35000 },
  { month: 'Apr', donations: 61000, withdrawals: 42000 },
  { month: 'May', donations: 55000, withdrawals: 38000 },
  { month: 'Jun', donations: 67000, withdrawals: 41000 },
  { month: 'Jul', donations: 72000, withdrawals: 45000 }
];

// Sample data for user distribution
const userDistributionData = [
  { name: 'Institutes', value: 35, color: '#3B82F6' },
  { name: 'Donors', value: 45, color: '#10B981' },
  { name: 'Shopkeepers', value: 20, color: '#6366F1' }
];

const ReportsPage: React.FC = () => {
  const [dateRange, setDateRange] = useState('month');
  const [isDownloading, setIsDownloading] = useState<string | null>(null);

  // Generate Financial Report Content
  const generateFinancialReport = () => {
    const totalDonations = donationData.reduce((sum, item) => sum + item.donations, 0);
    const totalWithdrawals = donationData.reduce((sum, item) => sum + item.withdrawals, 0);
    
    return `
FINANCIAL REPORT
Generated on: ${new Date().toLocaleString()}

SUMMARY
-------------------------
Total Donations: ₹${totalDonations.toLocaleString()}
Total Withdrawals: ₹${totalWithdrawals.toLocaleString()}
Net Balance: ₹${(totalDonations - totalWithdrawals).toLocaleString()}

MONTHLY BREAKDOWN
-------------------------
${donationData.map(item => `
${item.month} 2025
Donations: ₹${item.donations.toLocaleString()}
Withdrawals: ₹${item.withdrawals.toLocaleString()}
Net: ₹${(item.donations - item.withdrawals).toLocaleString()}
`).join('\n')}

KEY METRICS
-------------------------
Average Monthly Donation: ₹${(totalDonations / donationData.length).toFixed(2)}
Average Monthly Withdrawal: ₹${(totalWithdrawals / donationData.length).toFixed(2)}
Growth Rate: +15.2%

RECOMMENDATIONS
-------------------------
1. Focus on increasing donor retention rate
2. Optimize withdrawal processing time
3. Implement new donation channels

Report generated by DonorConnect Admin System
`;
  };

  // Generate User Activity Report Content
  const generateUserActivityReport = () => {
    return `Date,User Type,Total Users,Active Users,New Registrations,Engagement Rate
2025-02-01,Donors,1200,850,45,71%
2025-02-01,Institutes,350,280,12,80%
2025-02-01,Shopkeepers,180,150,8,83%
2025-02-08,Donors,1250,880,50,70%
2025-02-08,Institutes,365,295,15,81%
2025-02-08,Shopkeepers,190,160,10,84%
2025-02-15,Donors,1300,920,50,71%
2025-02-15,Institutes,380,310,15,82%
2025-02-15,Shopkeepers,200,170,10,85%
2025-02-22,Donors,1350,950,50,70%
2025-02-22,Institutes,395,325,15,82%
2025-02-22,Shopkeepers,210,180,10,86%

Notes:
- Engagement rate = Active Users / Total Users
- New registrations are counted on a weekly basis
- Active users are defined as users who logged in at least once in the past week
- Data is aggregated weekly for February 2025
`;
  };

  // Generate Feedback Analysis Report Content
  const generateFeedbackReport = () => {
    return `
FEEDBACK ANALYSIS REPORT
Generated on: ${new Date().toLocaleString()}

1. OVERALL SATISFACTION METRICS
------------------------------
Average Rating: 4.2/5.0
Total Feedback Received: 250
Response Rate: 92%

2. FEEDBACK BY CATEGORY
------------------------------
App Experience: 35%
- Average Rating: 4.0/5.0
- Common Issues: Navigation, Loading Speed
- Positive Points: Easy Donation Process

Service Quality: 45%
- Average Rating: 4.5/5.0
- Common Issues: Response Time
- Positive Points: Volunteer Helpfulness

General Feedback: 20%
- Average Rating: 4.1/5.0
- Common Issues: Documentation
- Positive Points: Platform Concept

3. TREND ANALYSIS
------------------------------
Week 1: 4.0/5.0 (62 responses)
Week 2: 4.2/5.0 (58 responses)
Week 3: 4.3/5.0 (65 responses)
Week 4: 4.4/5.0 (65 responses)

4. KEY INSIGHTS
------------------------------
- Overall satisfaction shows upward trend
- Mobile app experience needs improvement
- Volunteer service receives highest ratings
- Documentation requires enhancement

5. RECOMMENDATIONS
------------------------------
1. Implement mobile app optimizations
2. Enhance user documentation
3. Maintain high service standards
4. Reduce response time for queries

Report generated by DonorConnect Analytics
`;
  };

  // Generate Complete Analytics Report
  const generateCompleteAnalytics = () => {
    const totalDonations = donationData.reduce((sum, item) => sum + item.donations, 0);
    const totalWithdrawals = donationData.reduce((sum, item) => sum + item.withdrawals, 0);
    const averageDonation = totalDonations / donationData.length;
    const averageWithdrawal = totalWithdrawals / donationData.length;
    
    return `
COMPLETE ANALYTICS REPORT
Generated on: ${new Date().toLocaleString()}
=======================================================

EXECUTIVE SUMMARY
-------------------------------------------------------
Period: ${dateRange.charAt(0).toUpperCase() + dateRange.slice(1)}
Total Donations: ₹${totalDonations.toLocaleString()}
Total Withdrawals: ₹${totalWithdrawals.toLocaleString()}
Net Balance: ₹${(totalDonations - totalWithdrawals).toLocaleString()}

1. FINANCIAL METRICS
-------------------------------------------------------
Monthly Average Donation: ₹${averageDonation.toLocaleString()}
Monthly Average Withdrawal: ₹${averageWithdrawal.toLocaleString()}
Growth Rate (YoY): +15.2%
Transaction Success Rate: 98.5%

Monthly Breakdown:
${donationData.map(item => `
${item.month} 2025
- Donations: ₹${item.donations.toLocaleString()}
- Withdrawals: ₹${item.withdrawals.toLocaleString()}
- Net: ₹${(item.donations - item.withdrawals).toLocaleString()}`).join('\n')}

2. USER DISTRIBUTION
-------------------------------------------------------
Total Users: ${userDistributionData.reduce((sum, item) => sum + item.value, 0)}
${userDistributionData.map(item => `
${item.name}: ${item.value}%
- Active Users: ${Math.floor(item.value * 8.5)}%
- New Users This Month: ${Math.floor(item.value * 0.15)}%`).join('\n')}

3. PLATFORM PERFORMANCE
-------------------------------------------------------
Average Response Time: 2.3 seconds
Platform Uptime: 99.9%
Mobile App Usage: 65%
Desktop Usage: 35%

4. KEY PERFORMANCE INDICATORS
-------------------------------------------------------
Donor Retention Rate: 78%
Average Donation Size: ₹3,500
User Satisfaction Score: 4.2/5.0
Request Fulfillment Rate: 92%

5. GROWTH METRICS
-------------------------------------------------------
New User Growth: +25% MoM
Donation Growth: +18% MoM
Platform Engagement: +32% MoM
Mobile App Installations: +45% MoM

6. GEOGRAPHICAL DISTRIBUTION
-------------------------------------------------------
Top 5 Regions by Donation Volume:
1. Mumbai Region: 35%
2. Delhi NCR: 25%
3. Bangalore: 15%
4. Chennai: 12%
5. Pune: 8%

7. RECOMMENDATIONS
-------------------------------------------------------
1. Focus Areas:
   - Increase donor retention through personalized engagement
   - Optimize mobile app performance
   - Expand geographical reach to tier-2 cities
   - Implement AI-based donation matching

2. Opportunities:
   - Launch corporate donation program
   - Implement recurring donation feature
   - Enhance social sharing capabilities
   - Develop community engagement features

3. Risk Mitigation:
   - Enhance security measures
   - Improve verification processes
   - Implement fraud detection systems
   - Regular platform audits

8. CONCLUSION
-------------------------------------------------------
The platform shows strong growth with positive trends in
both donations and user engagement. Focus should be on
scaling infrastructure and improving user experience to
maintain growth trajectory.

=======================================================
Report generated by DonorConnect Analytics System
For internal use only
Generated on: ${new Date().toLocaleString()}
`;
  };

  // Updated handleDownloadReport function
  const handleDownloadReport = (reportType: string, format: 'pdf' | 'excel') => {
    setIsDownloading(reportType);
    
    try {
      let content = '';
      let filename = '';
      let type = '';
      
      switch(reportType) {
        case 'Complete Analytics':
          content = generateCompleteAnalytics();
          filename = `complete-analytics-${new Date().toISOString().split('T')[0]}`;
          type = 'text/plain';
          break;
        case 'Financial Report':
          content = generateFinancialReport();
          filename = `financial-report-${new Date().toISOString().split('T')[0]}`;
          type = 'text/plain';
          break;
        case 'User Activity Report':
          content = generateUserActivityReport();
          filename = `user-activity-report-${new Date().toISOString().split('T')[0]}`;
          type = 'text/csv';
          break;
        case 'Feedback Analysis':
          content = generateFeedbackReport();
          filename = `feedback-analysis-${new Date().toISOString().split('T')[0]}`;
          type = 'text/plain';
          break;
        default:
          throw new Error('Invalid report type');
      }

      // Add BOM for Excel compatibility
      const BOM = '\uFEFF';
      const finalContent = type === 'text/csv' ? BOM + content : content;

      // Create and download file
      const blob = new Blob([finalContent], { type: `${type};charset=utf-8` });
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${filename}.${format === 'excel' ? 'csv' : 'txt'}`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(url);

      // Show success notification
      const notification = document.createElement('div');
      notification.className = 'fixed bottom-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg z-50';
      notification.textContent = `${reportType} downloaded successfully`;
      document.body.appendChild(notification);
      setTimeout(() => notification.remove(), 3000);
    } catch (error) {
      console.error('Download failed:', error);
      // Show error notification
      const notification = document.createElement('div');
      notification.className = 'fixed bottom-4 right-4 bg-red-500 text-white px-4 py-2 rounded-lg shadow-lg z-50';
      notification.textContent = `Failed to download ${reportType}`;
      document.body.appendChild(notification);
      setTimeout(() => notification.remove(), 3000);
    } finally {
      setIsDownloading(null);
    }
  };

  return (
    <Layout>
      <div className="p-4 sm:p-6 w-full max-w-[1400px] mx-auto">
        <div className="mb-6 sm:mb-8">
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
            <div>
              <h1 className="text-xl sm:text-2xl font-bold text-gray-900">Analytics & Reports</h1>
              <p className="mt-1 text-sm text-gray-500">View detailed analytics and generate reports</p>
            </div>
            <div className="flex flex-col sm:flex-row gap-2">
              <select
                className="border rounded-lg px-4 py-2 bg-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                value={dateRange}
                onChange={(e) => setDateRange(e.target.value)}
              >
                <option value="week">Last Week</option>
                <option value="month">Last Month</option>
                <option value="quarter">Last Quarter</option>
                <option value="year">Last Year</option>
              </select>
              <button 
                onClick={() => handleDownloadReport('Complete Analytics', 'pdf')}
                className="flex items-center justify-center gap-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
              >
                <Download size={20} />
                Export Report
              </button>
            </div>
          </div>
        </div>

        {/* Charts Grid */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
          {/* Donation Trends Chart */}
          <div className="bg-white p-4 sm:p-6 rounded-lg shadow">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Donation Trends</h3>
            <div className="h-[300px] sm:h-[400px]">
              <ResponsiveContainer width="100%" height="100%">
                <AreaChart data={donationData} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="month" />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  <Area
                    type="monotone"
                    dataKey="donations"
                    name="Donations"
                    stroke="#3B82F6"
                    fill="#93C5FD"
                    stackId="1"
                  />
                  <Area
                    type="monotone"
                    dataKey="withdrawals"
                    name="Withdrawals"
                    stroke="#10B981"
                    fill="#6EE7B7"
                    stackId="1"
                  />
                </AreaChart>
              </ResponsiveContainer>
            </div>
          </div>

          {/* User Distribution Chart */}
          <div className="bg-white p-4 sm:p-6 rounded-lg shadow">
            <h3 className="text-lg font-medium text-gray-900 mb-4">User Distribution</h3>
            <div className="h-[300px] sm:h-[400px]">
              <ResponsiveContainer width="100%" height="100%">
                <PieChart>
                  <Pie
                    data={userDistributionData}
                    cx="50%"
                    cy="50%"
                    innerRadius={60}
                    outerRadius={100}
                    paddingAngle={5}
                    dataKey="value"
                    label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                  >
                    {userDistributionData.map((entry, index) => (
                      <Cell key={index} fill={entry.color} />
                    ))}
                  </Pie>
                  <Tooltip />
                  <Legend />
                </PieChart>
              </ResponsiveContainer>
            </div>
          </div>
        </div>

        {/* Detailed Reports Section */}
        <div className="bg-white rounded-lg shadow">
          <div className="p-4 sm:p-6">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Detailed Reports</h3>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
              {/* Financial Report */}
              <div className="p-4 border rounded-lg hover:shadow-md transition-shadow">
                <div className="flex items-start justify-between mb-4">
                  <div>
                    <h4 className="font-medium text-gray-900">Financial Report</h4>
                    <p className="text-sm text-gray-500 mt-1">Complete financial analysis</p>
                  </div>
                  <span className="text-blue-600 bg-blue-50 px-2 py-1 rounded text-xs">PDF</span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-500">Last updated: Today</span>
                  <button
                    onClick={() => handleDownloadReport('Financial Report', 'pdf')}
                    disabled={isDownloading === 'Financial Report'}
                    className="flex items-center gap-2 text-blue-600 hover:text-blue-800"
                  >
                    <Download size={16} />
                    {isDownloading === 'Financial Report' ? 'Downloading...' : 'Download'}
                  </button>
                </div>
              </div>

              {/* User Activity Report */}
              <div className="p-4 border rounded-lg hover:shadow-md transition-shadow">
                <div className="flex items-start justify-between mb-4">
                  <div>
                    <h4 className="font-medium text-gray-900">User Activity Report</h4>
                    <p className="text-sm text-gray-500 mt-1">User engagement metrics</p>
                  </div>
                  <span className="text-green-600 bg-green-50 px-2 py-1 rounded text-xs">Excel</span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-500">Last updated: Yesterday</span>
                  <button
                    onClick={() => handleDownloadReport('User Activity Report', 'excel')}
                    disabled={isDownloading === 'User Activity Report'}
                    className="flex items-center gap-2 text-blue-600 hover:text-blue-800"
                  >
                    <Download size={16} />
                    {isDownloading === 'User Activity Report' ? 'Downloading...' : 'Download'}
                  </button>
                </div>
              </div>

              {/* Feedback Analysis */}
              <div className="p-4 border rounded-lg hover:shadow-md transition-shadow">
                <div className="flex items-start justify-between mb-4">
                  <div>
                    <h4 className="font-medium text-gray-900">Feedback Analysis</h4>
                    <p className="text-sm text-gray-500 mt-1">User feedback insights</p>
                  </div>
                  <span className="text-purple-600 bg-purple-50 px-2 py-1 rounded text-xs">PDF</span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-500">Last updated: 2 days ago</span>
                  <button
                    onClick={() => handleDownloadReport('Feedback Analysis', 'pdf')}
                    disabled={isDownloading === 'Feedback Analysis'}
                    className="flex items-center gap-2 text-blue-600 hover:text-blue-800"
                  >
                    <Download size={16} />
                    {isDownloading === 'Feedback Analysis' ? 'Downloading...' : 'Download'}
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </Layout>
  );
};

export default ReportsPage; 